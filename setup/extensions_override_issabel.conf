
[macro-hangupcall]
include => macro-hangupcall-custom

; Validar si el archivo de MixMon existe. Puede no existir si la llamada cuelga
; del lado origen antes que el destino conteste (Elastix bug #422)
exten => s,1,GotoIf($["${CDR(recordingfile)}" = ""]?endmixmoncheck)
; Si CDR(recordingfile) esta asignado y existe, NO LO TOCO
exten => s,n,Set(MIXMON_CALLFILENAME=${ASTSPOOLDIR}/monitor/${CDR(recordingfile)})
exten => s,n,System(test -e ${MIXMON_CALLFILENAME})
exten => s,n,Noop(SYSTEMSTATUS = ${SYSTEMSTATUS})
exten => s,n,GotoIf($["${SYSTEMSTATUS}" = "SUCCESS"]?finalcdr)
; Si CDR(recordingfile) es alcanzable con YEAR/MONTH/DAY, se modifica y va al final
exten => s,n,Set(MIXMON_CALLFILENAME=${ASTSPOOLDIR}/monitor/${MIXMON_DIR}${YEAR}/${MONTH}/${DAY}/${CDR(recordingfile)})
exten => s,n,System(test -e ${MIXMON_CALLFILENAME})
exten => s,n,Noop(SYSTEMSTATUS = ${SYSTEMSTATUS})
exten => s,n,GotoIf($["${SYSTEMSTATUS}" = "SUCCESS"]?mmtestsuccess1)
exten => s,n,Goto(mmtest1)
;exten => s,n(mmtestsuccess1),Set(CDR(recordingfile)=${ASTSPOOLDIR}/monitor/${MIXMON_DIR}${YEAR}/${MONTH}/${DAY}/${CDR(recordingfile)})
exten => s,n(mmtestsuccess1),Noop(No need to set CDR recordingfile with absolute path, leave it alone for consistency)
exten => s,n,Goto(finalcdr)

; Este codigo es fragil. Actualizar si se averigua la manera de consultar AST_MONITOR_DIR
exten => s,n(mmtest1),Set(MIXMON_CALLFILENAME=${ASTSPOOLDIR}/monitor/${CALLFILENAME}.${MIXMON_FORMAT})
exten => s,n,GotoIf($["${MIXMON_DIR}" = ""]?defaultmixmondir)
exten => s,n,Set(MIXMON_CALLFILENAME=${MIXMON_DIR}${CALLFILENAME}.${MIXMON_FORMAT})
exten => s,n(defaultmixmondir),System(test -e ${MIXMON_CALLFILENAME})
exten => s,n,Noop(SYSTEMSTATUS = ${SYSTEMSTATUS})
exten => s,n,GotoIf($["${SYSTEMSTATUS}" = "SUCCESS"]?endmixmoncheck)
; Si archivo MixMon no existe, se anula CDR(recordingfile)
exten => s,n,Set(CDR(recordingfile)=)
exten => s,n(endmixmoncheck),Noop(End of MIXMON check)

; Validar si existe el archivo de grabacion de MeetMe. Puede que el archivo de
; grabacion sea distinto del especificado en el contexto, porque solo obedece
; la asignacion del primer conferencista que entra a la conferencia.
exten => s,n,GotoIf($["${MEETME_RECORDINGFILE}" = ""]?nomeetmemon)
exten => s,n,GotoIf($["${MEETME_ACTUAL_RECORDINGFILE}" = ""]?nomeetmemon)
; Revisar si existe ${MEETME_ACTUAL_RECORDINGFILE}.${MIXMON_FORMAT}
exten => s,n,Set(MEETME_REAL_TESTFILE=${MEETME_ACTUAL_RECORDINGFILE}.${MIXMON_FORMAT})
exten => s,n,Set(MEETME_ALIAS_TESTFILE=${MEETME_RECORDINGFILE}.${MIXMON_FORMAT})
exten => s,n,System(test -e ${MEETME_REAL_TESTFILE})
exten => s,n,Noop(SYSTEMSTATUS = ${SYSTEMSTATUS})
exten => s,n,GotoIf($["${SYSTEMSTATUS}" = "SUCCESS"]?meetmemonexists)
; Revisar si existe ${MEETME_ACTUAL_RECORDINGFILE}.wav
exten => s,n,Set(MEETME_REAL_TESTFILE=${MEETME_ACTUAL_RECORDINGFILE}.wav)
exten => s,n,Set(MEETME_ALIAS_TESTFILE=${MEETME_RECORDINGFILE}.wav)
exten => s,n,System(test -e ${MEETME_REAL_TESTFILE})
exten => s,n,Noop(SYSTEMSTATUS = ${SYSTEMSTATUS})
exten => s,n,GotoIf($["${SYSTEMSTATUS}" = "SUCCESS"]?meetmemonexists)
exten => s,n,Goto(nomeetmemon)
exten => s,n(meetmemonexists),Noop(MEETME recording is ${MEETME_REAL_TESTFILE})
; Revisar si MEETME_ACTUAL_RECORDINGFILE difiere de MEETME_RECORDINGFILE
exten => s,n,GotoIf($["${MEETME_RECORDINGFILE}" = "${MEETME_ACTUAL_RECORDINGFILE}"]?meetmeskiplink)
exten => s,n,Noop(Hardlinking ${MEETME_REAL_TESTFILE} to ${MEETME_ALIAS_TESTFILE})
exten => s,n,System(ln ${MEETME_REAL_TESTFILE} ${MEETME_ALIAS_TESTFILE})
exten => s,n(meetmeskiplink),Set(CDR(recordingfile)=${MEETME_ALIAS_TESTFILE})
exten => s,n(nomeetmemon),Noop(End of MEETME check)

; Validar si existe el archivo de grabacion bajo demanda para la extension
exten => s,n,GotoIf($["${TOUCH_MONITOR_OUTPUT}" = ""]?noautomon)
exten => s,n,GotoIf($["${TOUCH_MONITOR_FORMAT}" = ""]?noautomonformat)
exten => s,n,Set(CDR(recordingfile)=${TOUCH_MONITOR_OUTPUT}.${TOUCH_MONITOR_FORMAT})
exten => s,n,Goto(noautomon)
exten => s,n(noautomonformat),Set(CDR(recordingfile)=${TOUCH_MONITOR_OUTPUT}.wav)
exten => s,n(noautomon),Noop(TOUCH_MONITOR_OUTPUT=${TOUCH_MONITOR_OUTPUT})

; Validar si existe el archivo de grabacion de la cola
exten => s,n,GotoIf($["${MONITOR_FILENAME}" = ""]?noautomon2)
exten => s,n,System(test -e ${MONITOR_FILENAME}*)
exten => s,n,Noop(SYSTEMSTATUS = ${SYSTEMSTATUS})
exten => s,n,GotoIf($["${SYSTEMSTATUS}" = "APPERROR"]?errornoautomon)
exten => s,n,Set(CDR(recordingfile)=${MONITOR_FILENAME})
exten => s,n(errornoautomon),Noop(End of MONITOR QUEUE check)
exten => s,n(noautomon2),Noop(MONITOR_FILENAME=${MONITOR_FILENAME})

; Validar nombre de archivo de grabacion bajo demanda en IssabelPBX 2.11
exten => s,n,GotoIf($["${MIXMONITOR_FILENAME}" = ""]?noautomon3)
exten => s,n,System(test -e ${MIXMONITOR_FILENAME}*)
exten => s,n,Noop(SYSTEMSTATUS = ${SYSTEMSTATUS})
exten => s,n,GotoIf($["${SYSTEMSTATUS}" = "APPERROR"]?errornoautomon2)
exten => s,n,Set(CDR(recordingfile)=${MIXMONITOR_FILENAME})
exten => s,n(errornoautomon2),Noop(End of MIXMONITOR_FILENAME check)
exten => s,n(noautomon3),Noop(MIXMONITOR_FILENAME=${MIXMONITOR_FILENAME})

; Validar si existe el archivo de grabacion bajo demanda en IssabelPBX 2.11 sin ruta
exten => s,n,GotoIf($["${ONETOUCH_RECFILE}" = ""]?noautomon4)
exten => s,n,Set(CDR(recordingfile)=${ONETOUCH_RECFILE})
exten => s,n(noautomon4),Noop(ONETOUCH_RECFILE=${ONETOUCH_RECFILE})

exten => s,n(finalcdr),Noop(CDR recordingfile set to: ${CDR(recordingfile)})

exten => s,n(start),GotoIf($["${USE_CONFIRMATION}"="" | "${RINGGROUP_INDEX}"="" | "${CHANNEL}"!="${UNIQCHAN}"]?skiprg)
exten => s,n,Noop(Cleaning Up Confirmation Flag: RG/${RINGGROUP_INDEX}/${CHANNEL})
exten => s,n(delrgi),Noop(Deleting: RG/${RINGGROUP_INDEX}/${CHANNEL} ${DB_DELETE(RG/${RINGGROUP_INDEX}/${CHANNEL})})
exten => s,n(skiprg),GotoIf($["${BLKVM_BASE}"="" | "BLKVM/${BLKVM_BASE}/${CHANNEL}"!="${BLKVM_OVERRIDE}"]?skipblkvm)
exten => s,n,Noop(Cleaning Up Block VM Flag: ${BLKVM_OVERRIDE})
exten => s,n(delblkvm),Noop(Deleting: ${BLKVM_OVERRIDE} ${DB_DELETE(${BLKVM_OVERRIDE})})
exten => s,n(skipblkvm),GotoIf($["${FMGRP}"="" | "${FMUNIQUE}"="" | "${CHANNEL}"!="${FMUNIQUE}"]?theend)
exten => s,n(delfmrgp),Noop(Deleting: FM/DND/${FMGRP}/${CHANNEL} ${DB_DELETE(FM/DND/${FMGRP}/${CHANNEL})})
exten => s,n(theend),AGI(hangup.agi)
exten => s,n,Hangup

